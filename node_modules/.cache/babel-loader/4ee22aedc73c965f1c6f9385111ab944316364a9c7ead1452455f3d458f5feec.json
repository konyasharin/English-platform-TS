{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nclass Form {\n  constructor(name) {\n    this._inputs = void 0;\n    this._inputsAutoFill = void 0;\n    this._nameForm = void 0;\n    makeAutoObservable(this);\n    this._inputs = [];\n    this._inputsAutoFill = [];\n    this._nameForm = name;\n  }\n  addInput(input) {\n    this._inputs.push(input);\n    return this._inputs[this._inputs.length - 1];\n  }\n  addInputAutoFill(input) {\n    this._inputsAutoFill.push(input);\n    return this._inputsAutoFill[this._inputsAutoFill.length - 1];\n  }\n  get nameForm() {\n    return this._nameForm;\n  }\n  getAllInputs() {\n    return this._inputs;\n  }\n  getAllInputsAutoFill() {\n    return this._inputsAutoFill;\n  }\n  getInput(nameInput) {\n    let i;\n    for (i = 0; i < this._inputs.length; i++) {\n      if (this._inputs[i].name === nameInput) {\n        return this._inputs[i];\n      }\n    }\n  }\n  checkRepeatAutoFillInputs() {\n    let i;\n    let j;\n    for (i = 0; i < this.getAllInputsAutoFill().length; i++) {\n      for (j = i + 2; j < this.getAllInputsAutoFill().length; j += 2) {\n        // j += 2 потому что сравниваются переводы с\n        if (this.getAllInputsAutoFill()[i].equal(this.getAllInputsAutoFill()[j])) {\n          // переводами и слова со словами\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  checkEmptyAutoFillInputs() {\n    let i;\n    for (i = 0; i < this.getAllInputsAutoFill().length; i++) {\n      if (this.getAllInputsAutoFill()[i].text === \"\") {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport default Form;","map":{"version":3,"names":["makeAutoObservable","Form","constructor","name","_inputs","_inputsAutoFill","_nameForm","addInput","input","push","length","addInputAutoFill","nameForm","getAllInputs","getAllInputsAutoFill","getInput","nameInput","i","checkRepeatAutoFillInputs","j","equal","checkEmptyAutoFillInputs","text"],"sources":["C:/code/English-platform-TS/src/store/Form.ts"],"sourcesContent":["import Input from \"./Input\";\r\nimport {makeAutoObservable} from \"mobx\";\r\nimport InputAutoFill from \"./InputAutoFill\";\r\n\r\nclass Form{\r\n  private readonly _inputs: Array<Input>\r\n  private readonly _inputsAutoFill: Array<InputAutoFill>\r\n  private readonly _nameForm: string\r\n\r\n  public constructor(name: string) {\r\n    makeAutoObservable(this)\r\n    this._inputs = []\r\n    this._inputsAutoFill = []\r\n    this._nameForm = name\r\n  }\r\n  public addInput(input: Input | InputAutoFill): Input | InputAutoFill {\r\n    this._inputs.push(input)\r\n    return this._inputs[this._inputs.length - 1]\r\n  }\r\n\r\n  public addInputAutoFill(input: InputAutoFill): InputAutoFill{\r\n    this._inputsAutoFill.push(input)\r\n    return this._inputsAutoFill[this._inputsAutoFill.length - 1]\r\n  }\r\n\r\n  public get nameForm(){\r\n    return this._nameForm\r\n  }\r\n\r\n  public getAllInputs(){\r\n    return this._inputs\r\n  }\r\n\r\n  public getAllInputsAutoFill(){\r\n    return this._inputsAutoFill\r\n  }\r\n\r\n  public getInput(nameInput: string): Input | undefined{\r\n    let i: number\r\n    for (i = 0; i < this._inputs.length; i++){\r\n      if (this._inputs[i].name === nameInput){\r\n        return this._inputs[i]\r\n      }\r\n    }\r\n  }\r\n\r\n  public checkRepeatAutoFillInputs(): boolean{\r\n    let i: number\r\n    let j: number\r\n    for (i = 0; i < this.getAllInputsAutoFill().length; i ++){\r\n      for (j = i + 2; j < this.getAllInputsAutoFill().length; j += 2){ // j += 2 потому что сравниваются переводы с\r\n        if (this.getAllInputsAutoFill()[i].equal(this.getAllInputsAutoFill()[j])){ // переводами и слова со словами\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  public checkEmptyAutoFillInputs(): boolean{\r\n    let i: number\r\n    for(i = 0; i < this.getAllInputsAutoFill().length; i ++){\r\n      if(this.getAllInputsAutoFill()[i].text === \"\"){\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport default Form"],"mappings":"AACA,SAAQA,kBAAkB,QAAO,MAAM;AAGvC,MAAMC,IAAI;EAKDC,WAAWA,CAACC,IAAY,EAAE;IAAA,KAJhBC,OAAO;IAAA,KACPC,eAAe;IAAA,KACfC,SAAS;IAGxBN,kBAAkB,CAAC,IAAI,CAAC;IACxB,IAAI,CAACI,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,SAAS,GAAGH,IAAI;EACvB;EACOI,QAAQA,CAACC,KAA4B,EAAyB;IACnE,IAAI,CAACJ,OAAO,CAACK,IAAI,CAACD,KAAK,CAAC;IACxB,OAAO,IAAI,CAACJ,OAAO,CAAC,IAAI,CAACA,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC;EAC9C;EAEOC,gBAAgBA,CAACH,KAAoB,EAAgB;IAC1D,IAAI,CAACH,eAAe,CAACI,IAAI,CAACD,KAAK,CAAC;IAChC,OAAO,IAAI,CAACH,eAAe,CAAC,IAAI,CAACA,eAAe,CAACK,MAAM,GAAG,CAAC,CAAC;EAC9D;EAEA,IAAWE,QAAQA,CAAA,EAAE;IACnB,OAAO,IAAI,CAACN,SAAS;EACvB;EAEOO,YAAYA,CAAA,EAAE;IACnB,OAAO,IAAI,CAACT,OAAO;EACrB;EAEOU,oBAAoBA,CAAA,EAAE;IAC3B,OAAO,IAAI,CAACT,eAAe;EAC7B;EAEOU,QAAQA,CAACC,SAAiB,EAAoB;IACnD,IAAIC,CAAS;IACb,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACb,OAAO,CAACM,MAAM,EAAEO,CAAC,EAAE,EAAC;MACvC,IAAI,IAAI,CAACb,OAAO,CAACa,CAAC,CAAC,CAACd,IAAI,KAAKa,SAAS,EAAC;QACrC,OAAO,IAAI,CAACZ,OAAO,CAACa,CAAC,CAAC;MACxB;IACF;EACF;EAEOC,yBAAyBA,CAAA,EAAW;IACzC,IAAID,CAAS;IACb,IAAIE,CAAS;IACb,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACH,oBAAoB,CAAC,CAAC,CAACJ,MAAM,EAAEO,CAAC,EAAG,EAAC;MACvD,KAAKE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,IAAI,CAACL,oBAAoB,CAAC,CAAC,CAACJ,MAAM,EAAES,CAAC,IAAI,CAAC,EAAC;QAAE;QAC/D,IAAI,IAAI,CAACL,oBAAoB,CAAC,CAAC,CAACG,CAAC,CAAC,CAACG,KAAK,CAAC,IAAI,CAACN,oBAAoB,CAAC,CAAC,CAACK,CAAC,CAAC,CAAC,EAAC;UAAE;UACzE,OAAO,IAAI;QACb;MACF;IACF;IACA,OAAO,KAAK;EACd;EAEOE,wBAAwBA,CAAA,EAAW;IACxC,IAAIJ,CAAS;IACb,KAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACH,oBAAoB,CAAC,CAAC,CAACJ,MAAM,EAAEO,CAAC,EAAG,EAAC;MACtD,IAAG,IAAI,CAACH,oBAAoB,CAAC,CAAC,CAACG,CAAC,CAAC,CAACK,IAAI,KAAK,EAAE,EAAC;QAC5C,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;AACF;AAEA,eAAerB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}