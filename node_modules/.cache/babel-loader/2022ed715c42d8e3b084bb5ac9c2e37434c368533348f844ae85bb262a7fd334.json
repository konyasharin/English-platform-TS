{"ast":null,"code":"var _jsxFileName = \"C:\\\\code\\\\English-platform-TS\\\\src\\\\Entry\\\\Registration.tsx\";\nimport Form from \"../Form/Form\";\nimport Input from \"../Input/Input\";\nimport { observer } from \"mobx-react-lite\";\nimport FormsStore from \"../store/FormsStore\";\nimport { FormNames, InputNames } from \"../initializeForms\";\nimport formsStore from \"../store/FormsStore\";\nimport axios from \"../axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function endRegistration(login, password, repeatPassword) {\n  if (password === repeatPassword) {\n    try {\n      await axios.post(\"auth/registration\", {\n        userName: login,\n        password: password\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    } catch (error) {\n      console.log(error.response.data);\n    }\n  } else {\n    console.log(\"Пароли не совпадают!\");\n  }\n}\nconst Registration = observer(_c = () => {\n  const registrationForm = FormsStore.getInstance().getForm(FormNames.REGISTRATION);\n  const inputsArray = [/*#__PURE__*/_jsxDEV(Input, {\n    placeholder: registrationForm.getInput(InputNames.LOGIN).placeholder,\n    value: registrationForm.getInput(InputNames.LOGIN).text,\n    edit: registrationForm.getInput(InputNames.LOGIN)\n  }, 1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 24\n  }, this), /*#__PURE__*/_jsxDEV(Input, {\n    placeholder: registrationForm.getInput(InputNames.PASSWORD).placeholder,\n    value: registrationForm.getInput(InputNames.PASSWORD).text,\n    edit: registrationForm.getInput(InputNames.PASSWORD)\n  }, 2, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Input, {\n    placeholder: registrationForm.getInput(InputNames.REPEAT_PASSWORD).placeholder,\n    value: registrationForm.getInput(InputNames.REPEAT_PASSWORD).text,\n    edit: registrationForm.getInput(InputNames.REPEAT_PASSWORD)\n  }, 3, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(Form, {\n    inputs: inputsArray,\n    btnText: \"Завершить регистрацию\",\n    title: \"Регистрация\",\n    onClick: () => {\n      endRegistration(formsStore.getInstance().getForm(FormNames.REGISTRATION).getInput(InputNames.LOGIN).text, formsStore.getInstance().getForm(FormNames.REGISTRATION).getInput(InputNames.PASSWORD).text, formsStore.getInstance().getForm(FormNames.REGISTRATION).getInput(InputNames.REPEAT_PASSWORD).text);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n});\n_c2 = Registration;\nexport default Registration;\nvar _c, _c2;\n$RefreshReg$(_c, \"Registration$observer\");\n$RefreshReg$(_c2, \"Registration\");","map":{"version":3,"names":["Form","Input","observer","FormsStore","FormNames","InputNames","formsStore","axios","jsxDEV","_jsxDEV","endRegistration","login","password","repeatPassword","post","userName","headers","error","console","log","response","data","Registration","_c","registrationForm","getInstance","getForm","REGISTRATION","inputsArray","placeholder","getInput","LOGIN","value","text","edit","fileName","_jsxFileName","lineNumber","columnNumber","PASSWORD","REPEAT_PASSWORD","inputs","btnText","title","onClick","_c2","$RefreshReg$"],"sources":["C:/code/English-platform-TS/src/Entry/Registration.tsx"],"sourcesContent":["import Form from \"../Form/Form\";\r\nimport Input from \"../Input/Input\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport FormsStore from \"../store/FormsStore\";\r\nimport {FormNames, InputNames} from \"../initializeForms\";\r\nimport formsStore from \"../store/FormsStore\";\r\nimport axios from \"../axios\";\r\n\r\nasync function endRegistration(login: string, password: string, repeatPassword: string){\r\n  if (password === repeatPassword){\r\n    try {\r\n      await axios.post(\"auth/registration\", {\r\n        userName: login,\r\n        password: password\r\n      }, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      })\r\n    } catch (error: any){\r\n      console.log(error.response.data)\r\n    }\r\n  } else{\r\n    console.log(\"Пароли не совпадают!\")\r\n  }\r\n}\r\n\r\nconst Registration = observer(() => {\r\n  const registrationForm = FormsStore.getInstance().getForm(FormNames.REGISTRATION)!\r\n\r\n  const inputsArray = [<Input placeholder={registrationForm.getInput(InputNames.LOGIN)!.placeholder}\r\n                              key={1} value={registrationForm.getInput(InputNames.LOGIN)!.text}\r\n                              edit={registrationForm.getInput(InputNames.LOGIN)!}/>,\r\n    <Input placeholder={registrationForm.getInput(InputNames.PASSWORD)!.placeholder}\r\n           key={2} value={registrationForm.getInput(InputNames.PASSWORD)!.text}\r\n           edit={registrationForm.getInput(InputNames.PASSWORD)!}/>,\r\n    <Input placeholder={registrationForm.getInput(InputNames.REPEAT_PASSWORD)!.placeholder}\r\n           key={3} value={registrationForm.getInput(InputNames.REPEAT_PASSWORD)!.text}\r\n           edit={registrationForm.getInput(InputNames.REPEAT_PASSWORD)!}/>]\r\n\r\n  return(\r\n    <Form inputs={inputsArray} btnText={\"Завершить регистрацию\"} title={\"Регистрация\"} onClick={() => {\r\n      endRegistration(formsStore.getInstance().getForm(FormNames.REGISTRATION)!.getInput(InputNames.LOGIN)!.text,\r\n        formsStore.getInstance().getForm(FormNames.REGISTRATION)!.getInput(InputNames.PASSWORD)!.text,\r\n        formsStore.getInstance().getForm(FormNames.REGISTRATION)!.getInput(InputNames.REPEAT_PASSWORD)!.text)\r\n    }}/>\r\n  )\r\n})\r\n\r\nexport default Registration"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}